{"version":3,"file":"typemoq.js","sources":["Api/Api/Api/MockBehavior.ts","Api/Api/Api/ExpectedCallType.ts","Error/Error/Error/Exception.ts","Error/Error/Error/MockException.ts","Api/Api/Api/Times.ts","Common/Common/Common/PropertyRetriever.ts","Consts.ts","Match/Match/Match/Match.ts","Common/Common/Common/Utils.ts","Match/Match/Match/MatchAny.ts","Match/Match/Match/MatchPred.ts","Match/Match/Match/MatchValue.ts","Match/Match/Match/MatchObjectWith.ts","Proxy/Proxy/Proxy/ICallContext.ts","Proxy/Proxy/Proxy/Invocation.ts","Proxy/Proxy/Proxy/ProxyES5.ts","Proxy/Proxy/Proxy/ProxyES6.ts","Proxy/Proxy/Proxy/ProxyES6Handler.ts","Proxy/Proxy/Proxy/ProxyFactory.ts","MockBase.ts","InterceptorContext.ts","CurrentInterceptContext.ts","InterceptorStrategies.ts","InterceptorExecute.ts","InterceptorSetup.ts","MethodCall.ts","MethodCallReturn.ts","StaticMock.ts","DynamicMock.ts","Api/Api/Api/MockApi.ts","Api/Api/Api/It.ts","GlobalMock.ts","Api/Api/Api/GlobalMockApi.ts","GlobalScope.ts","Api/Api/Api/GlobalScopeApi.ts"],"sourcesContent":["export enum MockBehavior { Loose, Strict }","export enum ExpectedCallType { InAnyOrder, InSequence }","export class Exception extends Error {\n    constructor(public name: string, message: string) {\n        super(message);\n        Object.setPrototypeOf(this, Exception.prototype);\n    }\n\n    toString(): string {\n        let errMsg = this.message ? `${this.name} - ${this.message}` : this.name;\n        return errMsg;\n    }\n}\n","import { Exception } from \"./Exception\";\n\nexport enum MockExceptionReason {\n    NoSetup = <any>\"no setup expression found for\",\n    MoreThanOneSetup = <any>\"more than one setup expression found for\",\n    InvalidArg = <any>\"invalid argument\",\n    InvalidSetup = <any>\"invalid setup expression\",\n    InvalidMatcher = <any>\"invalid matching expression\",\n    UnknownGlobalType = <any>\"unknown global type\",\n    CallCountVerificationFailed = <any>\"invocation count verification failed\",\n    CallOrderVerificationFailed = <any>\"invocation order verification failed\",\n    InvalidDynamicProxyRuntime = <any>\"invalid dynamic proxy runtime\"\n}\n\nexport class MockException extends Exception {\n    constructor(\n        public readonly reason: MockExceptionReason,\n        public readonly ctx: any,\n        public readonly message: string = undefined) {\n        super(\"MockException\", message);\n        Object.setPrototypeOf(this, MockException.prototype);\n    }\n\n    toString(): string {\n        let errMsg = `${this.name} - ${this.reason}`;\n        if (this.message)\n            errMsg = `${errMsg} (${this.message})`;\n        return errMsg;\n    }\n}","import * as _ from \"lodash\";\nimport * as common from \"../Common/_all\";\nimport * as error from \"../Error/_all\";\nimport * as proxy from \"../Proxy/_all\";\n\nexport class Times {\n\n    private static NO_MATCHING_CALLS_EXACTLY_N_TIMES = \"expected invocation of <%= i %> exactly <%= min %> times, invoked <%= c %> times\";\n    private static NO_MATCHING_CALLS_AT_LEAST_N_TIMES = \"expected invocation of <%= i %> at least <%= min %> times, invoked <%= c %> times\";\n    private static NO_MATCHING_CALLS_AT_MOST_N_TIMES = \"expected invocation of <%= i %> at most <%= max %> times, invoked <%= c %> times\";\n\n    private _lastCallCount: number;\n    private _failMessage: (...data: any[]) => string;\n\n    private constructor(\n        private _condition: common.IFunc2<number, boolean>,\n        public readonly min: number,\n        public readonly max: number,\n        failMessage: string) {\n        this._failMessage = _.template(failMessage);\n    }\n\n    failMessage(call: proxy.ICallContext) {\n        return this._failMessage({ i: call, min: this.min, max: this.max, c: this._lastCallCount });\n    }\n\n    verify(callCount: number): boolean {\n        this._lastCallCount = callCount;\n        return this._condition(callCount);\n    }\n\n    private static checkArg(n: number, target: string) {\n        if (n < 0)\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\n                undefined, `${target} argument cannot be a negative number`);\n    }\n\n    static exactly(n: number): Times {\n        Times.checkArg(n, \"'Times.exactly'\");\n        return new Times(c => c === n, n, n, Times.NO_MATCHING_CALLS_EXACTLY_N_TIMES);\n    }\n\n    static atLeast(n: number): Times {\n        Times.checkArg(n, \"'Times.atLeast'\");\n        return new Times(c => c >= n, n, 255, Times.NO_MATCHING_CALLS_AT_LEAST_N_TIMES);\n    }\n\n    static atMost(n: number): Times {\n        Times.checkArg(n, \"'Times.atMost'\");\n        return new Times(c => c >= 0 && c <= n, 0, n, Times.NO_MATCHING_CALLS_AT_MOST_N_TIMES);\n    }\n\n    static never(): Times {\n        return Times.exactly(0);\n    }\n\n    static once(): Times {\n        return Times.exactly(1);\n    }\n\n    static atLeastOnce(): Times {\n        return Times.atLeast(1);\n    }\n\n    static atMostOnce(): Times {\n        return Times.atMost(1);\n    }\n\n    toString(): string {\n        let res = \"\";\n        if (this.min === this.max) {\n            if (this.min === 0) {\n                res = \"never\";\n            } else if (this.min === 1) {\n                res = \"once\";\n            } else {\n                res = `${this.min} times`;\n            }\n        } else {\n            if (this.min === 0 && this.max !== 255)\n                res = `at most ${this.max} times`;\n            else\n                res = `at least ${this.min} times`;\n        }\n        return res;\n    }\n\n}\n","import * as _ from \"lodash\";\nimport { PropDescriptor } from \"./PropDescriptor\";\n\nexport class PropertyRetriever {\n\n    static getOwnEnumerables(obj: any) {\n        return this._getPropertyNames(obj, true, false, this._enumerable);\n        // Or could use for..in filtered with hasOwnProperty or just this: return Object.keys(obj);\n    }\n\n    static getOwnNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, true, false, this._notEnumerable);\n    }\n\n    static getOwnEnumerablesAndNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, true, false, this._enumerableAndNotEnumerable);\n        // Or just use: return Object.getOwnPropertyNames(obj);\n    }\n\n    static getPrototypeEnumerables(obj: any) {\n        return this._getPropertyNames(obj, false, true, this._enumerable);\n    }\n\n    static getPrototypeNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, false, true, this._notEnumerable);\n    }\n\n    static getPrototypeEnumerablesAndNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, false, true, this._enumerableAndNotEnumerable);\n    }\n\n    static getOwnAndPrototypeEnumerables(obj: any) {\n        return this._getPropertyNames(obj, true, true, this._enumerable);\n        // Or could use unfiltered for..in\n    }\n\n    static getOwnAndPrototypeNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, true, true, this._notEnumerable);\n    }\n\n    static getOwnAndPrototypeEnumerablesAndNonenumerables(obj: any) {\n        return this._getPropertyNames(obj, true, true, this._enumerableAndNotEnumerable);\n    }\n\n    // Private static property checker callbacks\n    private static _enumerable(obj: any, prop: any): boolean {\n        return obj.propertyIsEnumerable(prop);\n    }\n\n    private static _notEnumerable(obj: any, prop: any): boolean {\n        return !obj.propertyIsEnumerable(prop);\n    }\n\n    private static _enumerableAndNotEnumerable(obj: any, prop: any): boolean {\n        return true;\n    }\n\n    private static _getPropertyNames(\n        obj: any, iterateSelfBool: boolean, iteratePrototypeBool: boolean, includePropCb: (obj: any, prop: any) => boolean):\n        Array<{ name: string; desc: PropDescriptor }> {\n\n        let result: Array<{ name: string; desc: PropDescriptor }> = [];\n\n        do {\n            if (iterateSelfBool) {\n\n                let props = Object.getOwnPropertyNames(obj);\n                for (let prop of props) {\n                    let duplicate = _.find(result, (p: { name: string; desc: PropDescriptor }) => p.name === prop);\n\n                    if (!duplicate && includePropCb(obj, prop)) {\n                        let propDesc = Object.getOwnPropertyDescriptor(obj, prop);\n                        result.push({ name: prop, desc: propDesc });\n                    }\n                };\n            }\n\n            if (!iteratePrototypeBool) {\n                break;\n            }\n\n            iterateSelfBool = true;\n\n        } while (obj = Object.getPrototypeOf(obj));\n\n        return result;\n    }\n\n}","export class Consts {\n    static readonly IMATCH_ID_VALUE = \"438A51D3-6864-49D7-A655-CA1153B86965\";\n    static readonly IMATCH_ID_NAME = \"___id\";\n    static readonly IMATCH_MATCHES_NAME = \"___matches\";\n\n    static readonly IPROXY_ID_VALUE = \"BCDF5CE5-F0DF-40B7-8BA0-69DF395033C8\";\n    static readonly IPROXY_ID_NAME = \"___id\";\n}","import * as _ from \"lodash\";\nimport { Consts } from \"../Consts\";\n\nexport class Match {\n\n    static isMatcher(x: any): boolean {\n        return !_.isNil(x) &&\n            !_.isUndefined(x[Consts.IMATCH_MATCHES_NAME]) &&\n            !_.isUndefined(x[Consts.IMATCH_ID_NAME]) &&\n            x[Consts.IMATCH_ID_NAME] === Consts.IMATCH_ID_VALUE;\n    }\n\n}\n","import * as _ from \"lodash\";\nimport * as CircularJSON from \"circular-json\";\nimport { CtorWithArgs } from \"./Ctor\";\nimport { PropertyRetriever } from \"./PropertyRetriever\";\nimport { Match } from \"../Match/Match\";\n\nexport class Utils {\n\n    static functionName(fun: Object): string {\n        let res: string;\n        if ((<any>fun).name) {\n            res = (<any>fun).name;\n        } else {\n            let repr = fun.toString();\n            repr = repr.substr(\"function \".length);\n            res = repr.substr(0, repr.indexOf(\"(\"));\n        }\n        return res;\n    }\n\n    static objectName(obj: Object): string {\n        let res = Utils.functionName(obj.constructor);\n        return res;\n    }\n\n    static argsName(args: IArguments): string {\n        let argsArray: any[] = Array.prototype.slice.call(args);\n        let sargs = argsArray.map((x: any) => {\n            let res = \"\";\n            if (Match.isMatcher(x)) {\n                res = x.toString();\n            }\n            else {\n                const replacer = (key: string, value: any) => {\n                    if (value === undefined)\n                        return \"undefined\";\n                    if (_.isFunction(value))\n                        return \"Function\";\n                    return value;\n                };\n                res = CircularJSON.stringify(x, replacer);\n            }\n            return res;\n        });\n        let res = _.join(sargs);\n        return res;\n    }\n\n    static conthunktor<U>(ctor: CtorWithArgs<U>, args: any[]): U {\n        let ret: U = new ctor(...args);\n        return ret;\n    }\n\n    static clone(target: Object, source: Object) {\n        let sourceProps = PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(source);\n        for (let p of sourceProps)\n            Object.defineProperty(target, p.name, p.desc);\n    }\n}","import * as _ from \"lodash\";\nimport * as common from \"../Common/_all\";\nimport { IMatch } from \"./IMatch\";\nimport { Consts } from \"../Consts\";\n\nexport class MatchAnyObject<T> implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    constructor(private readonly _ctor: common.Ctor<T>) {\n    }\n\n    ___matches(object: Object): boolean {\n        let match = false;\n        if (object && object.constructor.prototype == this._ctor.prototype)\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        let res = `It.isAnyObject(${common.Utils.functionName(this._ctor)})`;\n        return res;\n    }\n}\n\nexport class MatchAny implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    ___matches(object: Object): boolean {\n        let match = true;\n        return match;\n    }\n\n    toString(): string {\n        return `It.isAny()`;\n    }\n}\n\nexport class MatchAnyString implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    ___matches(object: Object): boolean {\n        let match = false;\n        if (_.isString(object))\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        return `It.isAnyString()`;\n    }\n}\n\nexport class MatchAnyNumber implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    ___matches(object: Object): boolean {\n        let match = false;\n        if (_.isNumber(object))\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        return `It.isAnyNumber()`;\n    }\n}","import * as common from \"../Common/_all\";\nimport { IMatch } from \"./IMatch\";\nimport { Consts } from \"../Consts\";\n\nexport class MatchPred<T> implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    constructor(private readonly _pred: common.IFunc2<T, boolean>) {\n    }\n\n    ___matches(object: Object): boolean {\n        let match = false;\n        if (object && this._pred(<T>object))\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        let res = `It.is(${this._pred})`;\n        return res;\n    }\n}","import * as _ from \"lodash\";\nimport { IMatch } from \"./IMatch\";\nimport { Consts } from \"../Consts\";\nimport { Utils } from \"../Common/Utils\";\n\nexport class MatchValue<T> implements IMatch {\n\n    readonly ___id = Consts.IMATCH_ID_VALUE;\n\n    private readonly _value: T;\n\n    constructor(value: T) {\n        this._value = <any>_.cloneDeep(value);\n    }\n\n    ___matches(object: any): boolean {\n        let match = false;\n        if (_.isEqual(this._value, object))\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        let valueName = Utils.argsName(<any>[this._value]);\n        let res = `It.isValue(${valueName})`;\n        return res;\n    }\n}","import * as _ from \"lodash\";\nimport { IMatch } from \"./IMatch\";\nimport { Consts } from \"../Consts\";\nimport { Utils } from \"../Common/Utils\";\n\nexport class MatchObjectWith<T> implements IMatch {\n    \n    readonly ___id = Consts.IMATCH_ID_VALUE;\n    \n    private readonly _value: T;\n\n    constructor(value: T) {\n        this._value = <any>_.cloneDeep(value);\n    }\n\n    ___matches(object: Object): boolean {\n        let match = false;\n        let partial = _.pick(object, _.keys(this._value));\n        if (_.isEqual(this._value, partial))\n            match = true;\n        return match;\n    }\n\n    toString(): string {\n        let valueName = Utils.argsName(<any>[this._value]);\n        let res = `It.isObjectWith(${valueName})`;\n        return res;\n    }\n}\n","import { IPropertyInfo, InvocationType } from \"./Invocation\";\n\nexport enum CallType {\n    UNKNOWN, PROPERTY, FUNCTION\n}\n\nexport enum ProxyType {\n    STATIC, DYNAMIC\n}\n\nexport interface ICallContext {\n    args: IArguments;\n    property: IPropertyInfo;\n    returnValue: any;\n    invokeBase(): void;\n    invocationType: InvocationType;\n    callType: CallType;\n    proxyType: ProxyType;\n    isAnUnknownDynamicCallAtExecution: boolean;\n}\n","import * as _ from \"lodash\";\nimport * as common from \"../Common/_all\";\nimport { ICallContext, CallType, ProxyType } from \"./ICallContext\";\n\nexport enum InvocationType {\n    NONE, SETUP, EXECUTE\n}\n\nexport abstract class BaseInvocation implements ICallContext {\n    returnValue: any;\n    invocationType = InvocationType.NONE;\n\n    constructor(public readonly proxyType: ProxyType, public callType: CallType) {\n    }\n\n    abstract get args(): IArguments;\n    abstract set args(value: IArguments);\n\n    abstract get property(): IPropertyInfo;\n\n    abstract invokeBase(): void;\n\n    get isAnUnknownDynamicCallAtExecution(): boolean {\n        return this.proxyType == ProxyType.DYNAMIC &&\n            this.callType == CallType.UNKNOWN &&\n            this.invocationType == InvocationType.EXECUTE;\n    };\n}\n\nexport class MethodInvocation extends BaseInvocation {\n    private _args: IArguments;\n\n    constructor(\n        private readonly _that: Object,\n        private readonly _property: MethodInfo,\n        args?: IArguments,\n        proxyType = ProxyType.STATIC,\n        callType = CallType.FUNCTION) {\n\n        super(proxyType, callType);\n\n        if (args) {\n            this._args = <any>_.cloneDeep(args);\n            this._args.length = args.length;\n            this._args.callee = args.callee;\n        }\n    }\n\n    get args(): IArguments { return this._args || <any>{ length: 0, callee: null }; }\n    set args(value: IArguments) { this._args = value; }\n\n    get property(): IPropertyInfo { return this._property; }\n\n    invokeBase(): void {\n        let thatClone = {};\n        if (this._that)\n            common.Utils.clone(thatClone, this._that);\n        else\n            thatClone = this._property.obj;\n        this.returnValue = this._property.toFunc.apply(thatClone, this._args);\n    }\n\n    toString(): string {\n        const res = `${this.property}(${common.Utils.argsName(this.args)})`;\n        return res;\n    }\n}\n\nexport class ValueGetterInvocation extends BaseInvocation {\n    constructor(\n        private readonly _property: IPropertyInfo,\n        readonly value: any,\n        proxyType = ProxyType.STATIC,\n        callType = CallType.PROPERTY) {\n\n        super(proxyType, callType);\n\n        this.returnValue = _.cloneDeep(value);\n    }\n\n    get args(): IArguments {\n        let args: any[] = [];\n        Object.defineProperty(args, \"callee\",\n            { configurable: true, enumerable: true, writable: false, value: null });\n        return <any>args;\n    }\n    set args(value: IArguments) { }\n\n    get property(): IPropertyInfo { return this._property; }\n\n    invokeBase(): void {\n        this.returnValue = (<any>this._property.obj)[this._property.name];\n    }\n\n    toString(): string {\n        const res = `${this.property}`;\n        return res;\n    }\n}\n\nexport class DynamicGetInvocation extends ValueGetterInvocation {\n    constructor(\n        property: IPropertyInfo,\n        value: any) {\n\n        super(property, value, ProxyType.DYNAMIC, CallType.UNKNOWN);\n\n        this.returnValue = _.cloneDeep(value);\n    }\n}\n\nexport class ValueSetterInvocation extends BaseInvocation {\n    private _args: IArguments;\n\n    constructor(\n        private readonly _property: IPropertyInfo,\n        args: IArguments,\n        proxyType = ProxyType.STATIC,\n        callType = CallType.PROPERTY) {\n\n        super(proxyType, callType);\n\n        this._args = <any>_.cloneDeep(args);\n        this._args.length = args.length;\n        this._args.callee = args.callee;\n    }\n\n    get args(): IArguments { return this._args; }\n    set args(value: IArguments) { this._args = value; }\n\n    get property(): IPropertyInfo { return this._property; }\n\n    invokeBase(): void {\n        (<any>this._property.obj)[this._property.name] = this._args[0];\n        this.returnValue = (<any>this._property.obj)[this._property.name];\n    }\n\n    toString(): string {\n        const res = `${this.property} = ${common.Utils.argsName(this.args[0])}`;\n        return res;\n    }\n}\n\nexport class MethodGetterInvocation extends BaseInvocation {\n    constructor(\n        private readonly _property: IPropertyInfo,\n        private readonly _getter: () => any,\n        proxyType = ProxyType.STATIC,\n        callType = CallType.FUNCTION) {\n\n        super(proxyType, callType);\n    }\n\n    get args(): IArguments {\n        let args: any[] = [];\n        Object.defineProperty(args, \"callee\",\n            { configurable: true, enumerable: true, writable: false, value: null });\n        return <any>args;\n    }\n    set args(value: IArguments) { }\n\n    get property(): IPropertyInfo { return this._property; }\n\n    invokeBase(): void {\n        this.returnValue = (<any>this._property.obj)[this._property.name];\n    }\n\n    toString(): string {\n        const res = `${this.property}`;\n        return res;\n    }\n}\n\nexport class MethodSetterInvocation extends BaseInvocation {\n    private _args: IArguments;\n\n    constructor(\n        private readonly _property: IPropertyInfo,\n        private readonly _setter: (v: any) => void,\n        args: IArguments,\n        proxyType = ProxyType.STATIC,\n        callType = CallType.FUNCTION) {\n\n        super(proxyType, callType);\n\n        this._args = <any>_.cloneDeep(args);\n        this._args.length = args.length;\n        this._args.callee = args.callee;\n    }\n\n    get args(): IArguments { return this._args; }\n    set args(value: IArguments) { this._args = value; }\n\n    get property(): IPropertyInfo { return this._property; }\n\n    invokeBase(): void {\n        (<any>this._property.obj)[this._property.name] = this._args[0];\n        this.returnValue = (<any>this._property.obj)[this._property.name];\n    }\n\n    toString(): string {\n        const res = `${this.property}(${common.Utils.argsName(this.args[0])})`;\n        return res;\n    }\n}\n\nexport class MethodInfo implements IPropertyInfo {\n    readonly desc: common.PropDescriptor;\n\n    constructor(\n        public readonly obj: any,\n        public readonly name: string,\n        desc?: common.PropDescriptor) {\n\n        if (desc)\n            this.desc = _.cloneDeep(desc);\n    }\n\n    get toFunc(): Function {\n        const func = _.isFunction(this.obj) ? <Function>this.obj : <Function>this.obj[this.name];\n        return func;\n    }\n\n    toString(): string {\n        const objName = common.Utils.objectName(this.obj);\n        const res = _.isFunction(this.obj) ? `${objName}` : `${objName}.${this.name}`;\n        return res;\n    }\n}\n\nexport class PropertyInfo implements IPropertyInfo {\n    readonly desc: common.PropDescriptor;\n\n    constructor(\n        public readonly obj: Object,\n        public readonly name: string,\n        desc?: common.PropDescriptor) {\n\n        if (desc)\n            this.desc = _.cloneDeep(desc);\n    }\n\n    toString(): string {\n        const objName = common.Utils.objectName(this.obj);\n        const res = `${objName}.${this.name}`;\n        return res;\n    }\n}\n\nexport interface IPropertyInfo {\n    obj: Object;\n    name: string;\n    desc?: common.PropDescriptor;\n}\n","import * as _ from \"lodash\";\nimport * as common from \"../Common/_all\";\nimport * as error from \"../Error/_all\";\nimport { Consts } from \"../Consts\";\nimport { IProxy } from \"./IProxy\";\nimport { ICallContext } from \"./ICallContext\";\nimport { ICallInterceptor } from \"./ICallInterceptor\";\nimport { PropertyInfo, MethodInfo, MethodInvocation, MethodGetterInvocation, MethodSetterInvocation, ValueGetterInvocation, ValueSetterInvocation } from \"./Invocation\";\n\nexport class ProxyES5<T> implements IProxy {\n\n    readonly ___id = Consts.IPROXY_ID_VALUE;\n\n    private constructor(target: T, interceptor: ICallInterceptor) {\n        this.check(target);\n        let that = this;\n\n        let props = common.PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(target);\n        _.each(props, (prop: { name: string; desc: common.PropDescriptor }) => {\n\n            if (_.isFunction(prop.desc.value)) {\n                let propDesc: common.PropDescriptor = {\n                    configurable: prop.desc.configurable,\n                    enumerable: prop.desc.enumerable,\n                    writable: prop.desc.writable\n                };\n\n                this.defineMethodProxy(that, interceptor, target, prop.name, propDesc);\n            }\n            else {\n                let propDesc: common.PropDescriptor = {\n                    configurable: prop.desc.configurable,\n                    enumerable: prop.desc.enumerable\n                };\n\n                if (prop.desc.value !== undefined)\n                    this.defineValuePropertyProxy(that, interceptor, target, prop.name, prop.desc.value, propDesc);\n                else\n                    this.defineGetSetPropertyProxy(that, interceptor, target, prop.name, prop.desc.get, prop.desc.set, propDesc);\n            }\n\n        });\n    }\n\n    static of<U>(target: U, interceptor: ICallInterceptor): ProxyES5<U> {\n        ProxyES5.check(target);\n\n        let result: any;\n\n        if (_.isFunction(target)) {\n            let funcName = common.Utils.functionName(target);\n            result = ProxyES5.methodProxyValue(undefined, interceptor, target, funcName, null);\n        }\n        else {\n            result = new ProxyES5(target, interceptor);\n        }\n\n        return result;\n    }\n\n    static isProxy(obj: any): boolean {\n        if (!_.isNil(obj) &&\n            !_.isUndefined(obj[Consts.IPROXY_ID_NAME]) && obj[Consts.IPROXY_ID_NAME] === Consts.IPROXY_ID_VALUE)\n            return true;\n        else\n            return false;\n    }\n\n    private static check<U>(target: U): void {\n        ProxyES5.checkNotNullOrUndefined(target);\n\n        // allow only primitive objects and functions\n        let ok = false;\n        if (_.isFunction(target) ||\n            (_.isObject(target) && !ProxyES5.isPrimitiveObject(target)))\n            ok = true;\n\n        if (!ok)\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\n                target, `'${target}'; proxy argument should be a function or a non primitive object`);\n    }\n\n    private check<U>(target: U): void {\n        ProxyES5.checkNotNullOrUndefined(target);\n\n        // allow only non primitive objects\n        let ok = false;\n        if (!_.isFunction(target) &&\n            (_.isObject(target) && !ProxyES5.isPrimitiveObject(target)))\n            ok = true;\n\n        if (!ok)\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\n                target, `'${target}'; proxy argument should be a non primitive object`);\n    }\n\n    private static checkNotNullOrUndefined<U>(instance: U): void {\n        if (_.isNil(instance))\n            throw new error.MockException(error.MockExceptionReason.InvalidArg,\n                instance, `'${instance}'; proxy argument is required`);\n    }\n\n    private static isPrimitiveObject(obj: Object): boolean {\n        let result = false;\n\n        if (_.isFunction(obj) ||\n            _.isArray(obj) ||\n            _.isDate(obj) ||\n            _.isNull(obj))\n            result = true;\n\n        return result;\n    }\n\n    private defineMethodProxy(\n        that: Object,\n        interceptor: ICallInterceptor,\n        target: T,\n        propName: string,\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true, writable: false }) {\n\n        propDesc.value = ProxyES5.methodProxyValue(that, interceptor, target, propName, propDesc);\n\n        this.defineProperty(that, propName, propDesc);\n    }\n\n    private static methodProxyValue<U>(\n        that: Object,\n        interceptor: ICallInterceptor,\n        target: U,\n        propName: string,\n        propDesc: common.PropDescriptor): () => any {\n\n        function proxy() {\n            let method = new MethodInfo(target, propName, propDesc);\n            let invocation: ICallContext = new MethodInvocation(that, method, arguments);\n            interceptor.intercept(invocation);\n            return invocation.returnValue;\n        }\n        return proxy;\n    }\n\n    private defineValuePropertyProxy(\n        that: Object,\n        interceptor: ICallInterceptor,\n        target: T,\n        propName: string,\n        propValue: any,\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true }) {\n\n        function getProxy(): any {\n            let method = new PropertyInfo(target, propName);\n            let invocation: ICallContext = new ValueGetterInvocation(method, propValue);\n            interceptor.intercept(invocation);\n            return invocation.returnValue;\n        }\n        propDesc.get = getProxy;\n\n        function setProxy(v: any): void {\n            let method = new PropertyInfo(target, propName);\n            let invocation: ICallContext = new ValueSetterInvocation(method, arguments);\n            interceptor.intercept(invocation);\n        }\n        propDesc.set = setProxy;\n\n        this.defineProperty(that, propName, propDesc);\n    }\n\n    private defineGetSetPropertyProxy(\n        that: Object,\n        interceptor: ICallInterceptor,\n        target: T,\n        propName: string,\n        get?: () => any,\n        set?: (v: any) => void,\n        propDesc: common.PropDescriptor = { configurable: true, enumerable: true }) {\n\n        function getProxy(): any {\n            let method = new PropertyInfo(target, propName);\n            let invocation: ICallContext = new MethodGetterInvocation(method, get);\n            interceptor.intercept(invocation);\n            return invocation.returnValue;\n        }\n        propDesc.get = getProxy;\n\n        function setProxy(v: any): void {\n            let method = new PropertyInfo(target, propName);\n            let invocation: ICallContext = new MethodSetterInvocation(method, set, arguments);\n            interceptor.intercept(invocation);\n        }\n        propDesc.set = setProxy;\n\n        this.defineProperty(that, propName, propDesc);\n    }\n\n    private defineProperty(obj: Object, name: string, desc: common.PropDescriptor) {\n        try {\n            Object.defineProperty(obj, name, desc);\n        }\n        catch (e) {\n            console.log(e.message);\n        }\n    }\n}","///<reference path=\"../../node_modules/typescript/lib/lib.es6.d.ts\"/>\nimport * as error from \"../Error/_all\";\nimport { Consts } from \"../Consts\";\nimport { IProxy } from \"./IProxy\";\nimport { IProxyHandler, PropKey } from \"./IProxyHandler\";\n\nexport class ProxyES6<T> implements IProxy {\n\n    readonly ___id = Consts.IPROXY_ID_VALUE;\n\n    private constructor(target: T, handler: IProxyHandler<T>) {\n        const p = <ProxyES6<T>>new Proxy(<Object>target, handler);\n        (<any>p)[Symbol.toStringTag] = Function.prototype.toString.bind(target);\n        return p;\n    }\n\n    static of<U>(target: U, handler: IProxyHandler<U>): ProxyES6<U> {\n        ProxyES6.check();\n        const result = new ProxyES6(target, handler);\n        return result;\n    }\n\n    private static check(): void {\n        if (typeof Proxy === \"undefined\")\n            throw new error.MockException(error.MockExceptionReason.InvalidDynamicProxyRuntime,\n                null, \"ES6 Proxy object not detected; the dynamic mocking feature requires ES6 Proxy object support\");\n    }\n}\n","import * as common from \"../Common/_all\";\nimport { ICallContext, ProxyType, CallType } from \"./ICallContext\";\nimport { ICallInterceptor } from \"./ICallInterceptor\";\nimport * as inv from \"./Invocation\";\nimport { IProxyHandler, PropKey } from \"./IProxyHandler\";\n\nexport class ProxyES6Handler<T> implements IProxyHandler<T> {\n\n    constructor(private readonly _interceptor: ICallInterceptor) {\n    }\n\n    apply(target: T, thisArg: any, argArray?: any): any {\n\n        const funcName = common.Utils.functionName(target);\n        const method = new inv.MethodInfo(target, funcName);\n        const invocation: ICallContext = new inv.MethodInvocation(target, method, argArray, ProxyType.DYNAMIC);\n        this._interceptor.intercept(invocation);\n\n        return invocation.returnValue;\n    }\n\n    get(target: T, p: PropKey, receiver: any): any {\n\n        if (p !== Symbol.toStringTag &&\n            p !== Symbol.toPrimitive &&\n            p !== \"toJSON\") {\n\n            const propValue = (<any>target)[p];\n            const method = new inv.PropertyInfo(target, <string>p);\n            const invocation = new inv.DynamicGetInvocation(method, propValue);\n\n            this._interceptor.intercept(invocation);\n\n            if (invocation.callType == CallType.PROPERTY &&\n                invocation.property.desc) // value getter invocation at execution time\n\n                return invocation.returnValue;\n            else\n                return (...args: any[]) => {\n\n                    this._interceptor.removeInvocation(invocation);\n\n                    const method = new inv.MethodInfo(target, <string>p);\n                    const methodInvocation = new inv.MethodInvocation(target, method, <any>args, ProxyType.DYNAMIC);\n                    this._interceptor.intercept(methodInvocation);\n\n                    return methodInvocation.returnValue;\n                }\n        }\n        else\n            return Reflect.get(<Object>target, p, receiver);\n    }\n\n    set(target: T, p: PropKey, value: any, receiver: any): boolean {\n\n        if (p !== Symbol.toStringTag) {\n\n            const method = new inv.PropertyInfo(target, <string>p);\n            const invocation: ICallContext = new inv.ValueSetterInvocation(method, <any>[value], ProxyType.DYNAMIC);\n            this._interceptor.intercept(invocation);\n        }\n\n        return Reflect.set(<Object>target, p, value, receiver);\n    }\n\n    defineProperty(target: T, p: PropKey, attributes: common.PropDescriptor): boolean {\n\n        attributes.configurable = true;\n\n        return Reflect.defineProperty(<Object>target, p, attributes);\n    }\n\n}\n","import { ICallInterceptor } from \"./ICallInterceptor\";\nimport { ProxyES5 } from \"./ProxyES5\";\nimport { ProxyES6 } from \"./ProxyES6\";\nimport { ProxyES6Handler } from \"./ProxyES6Handler\";\n\nexport class ProxyFactory {\n    \n    static createProxy<T>(target: T, interceptor: ICallInterceptor): T {\n        let proxy: T = <T><any>ProxyES5.of(target, interceptor);\n        return proxy;\n    }\n\n    static createProxyES6<T>(target: T, interceptor: ICallInterceptor): T {\n        let proxyHandler: ProxyES6Handler<T> = new ProxyES6Handler(interceptor);\n        let proxy: T = <T><any>ProxyES6.of(target, proxyHandler);\n        return proxy;\n    }\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { InterceptorExecute } from \"./InterceptorExecute\";\nimport { MethodCall } from \"./MethodCall\";\nimport { MethodCallReturn } from \"./MethodCallReturn\";\n\nexport abstract class MockBase<T> implements all.IMock<T> {\n\n    private _id: string;\n    protected _name: string;\n    protected _interceptor: InterceptorExecute<T>;\n    protected _proxy: T;\n    private _callBase: boolean;\n\n    constructor(\n        public readonly target: T,\n        public readonly canOverrideTarget: boolean,\n        public readonly behavior: all.MockBehavior = all.MockBehavior.Loose) {\n        \n        this._id = this.generateId();\n        this._name = this.getNameOf(this.target);\n    }\n\n    get object() { return this._proxy; }\n    get name() { return this._name; }\n\n    get callBase() { return this._callBase; }\n    set callBase(value: boolean) { this._callBase = value; }\n\n    private generateId() {\n        return \"Mock<\" + _.uniqueId() + \">\";\n    }\n\n    private getNameOf(instance: T): string {\n        let result: string;\n\n        if (_.isFunction(instance)) {\n            result = all.Utils.functionName(instance);\n        }\n        else if (_.isObject(instance)) {\n            let ctor = instance.constructor;\n            result = all.Utils.functionName(ctor);\n        }\n\n        if (result)\n            result = result.trim();\n\n        return result;\n    }\n\n    // setup\n\n    abstract setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult>;\n\n    // verify\n\n    abstract verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void;\n\n    verifyAll(): void {\n        try {\n            this._interceptor.verify();\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n    // reset\n\n    reset(): void {\n        this._interceptor.reset();\n    }\n\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\n\nexport enum InterceptionAction { Continue, Stop }\n\nexport interface IInterceptStrategy<T> {\n\thandleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction;\n}\n\nexport class InterceptorContext<T> {\n\tprivate _actualInvocations: Array<all.ICallContext> = [];\n\tprivate _expectedCalls: Array<all.IProxyCall<T>> = [];\n\n\tconstructor(public mock: all.IMock<T>) { }\n\n\tget behavior(): all.MockBehavior { return this.mock.behavior; } \n\n\taddInvocation(invocation: all.ICallContext) { this._actualInvocations.push(invocation); }\n\tremoveInvocation(invocation: all.ICallContext) {\n\t\t_.remove(this._actualInvocations, (x: all.ICallContext): boolean => {\n\t\t\treturn x === invocation;\n\t\t});\n\t}\n\tactualInvocations(): all.ICallContext[] { return this._actualInvocations; }\n\tprivate clearInvocations() { this._actualInvocations.splice(0, this._actualInvocations.length); }\n\n\taddExpectedCall(call: all.IProxyCall<T>) { this._expectedCalls.push(call); }\n\tremoveExpectedCall(call: all.IProxyCall<T>) {\n\t\t_.filter(this._expectedCalls, (x: all.IProxyCall<T>): boolean => {\n\t\t\treturn x.id !== call.id;\n\t\t});\n\t}\n\texpectedCalls(): all.IProxyCall<T>[] { return this._expectedCalls; }\n\tprivate clearExpectedCalls() { this._expectedCalls.splice(0, this._expectedCalls.length); }\n\t\n\treset(): void {\n\t\tthis.clearInvocations();\n\t\tthis.clearExpectedCalls();\n\t}\n}","import * as all from \"./_all\";\n\nexport class CurrentInterceptContext<T> {\n    call: all.IProxyCall<T>;\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { InterceptorContext, IInterceptStrategy, InterceptionAction } from \"./InterceptorContext\";\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\n\nexport class AddActualInvocation<T> implements IInterceptStrategy<T> {\n\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\n        ctx.addInvocation(invocation);\n        return InterceptionAction.Continue;\n    }\n}\n\nexport class ExtractProxyCall<T> implements IInterceptStrategy<T> {\n\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\n        let expectedCalls = ctx.expectedCalls().slice();\n\n        let findCallPred = <T>(c: all.IProxyCall<T>) => c.matches(invocation);\n\n        let matchingCalls = _.filter(expectedCalls, (c: all.IProxyCall<T>) => {\n            return findCallPred(c);\n        });\n\n        if (matchingCalls.length > 1)   // record/replay scenario \n            findCallPred = <T>(c: all.IProxyCall<T>) => !c.isInvoked &&\n                c.matches(invocation);\n\n        localCtx.call = _.find(expectedCalls, (c: all.IProxyCall<T>) => {\n            return findCallPred(c);\n        });\n        \n        if (localCtx.call != null) {\n            // determine call type for dynamic mock at execution\n            if (invocation.isAnUnknownDynamicCallAtExecution) {\n                \n                invocation.callType = localCtx.call.setupCall.callType;\n                \n                if (invocation.callType == all.CallType.FUNCTION)\n                    return InterceptionAction.Stop; // avoid executing twice any existing setups\n            }\n\n            localCtx.call.evaluatedSuccessfully();\n        }\n        else if (ctx.behavior == all.MockBehavior.Strict)\n                throw new all.MockException(all.MockExceptionReason.NoSetup, invocation, `'${invocation}'`);\n\n        return InterceptionAction.Continue;\n    }\n}\n\nexport class ExecuteCall<T> implements IInterceptStrategy<T> {\n\n    private _ctx: InterceptorContext<T>;\n\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\n        this._ctx = ctx;\n        let currentCall = localCtx.call;\n\n        if (currentCall != null) {\n            currentCall.execute(invocation);\n            return InterceptionAction.Stop;\n        }\n\n        return InterceptionAction.Continue;\n    }\n\n}\n\nexport class InvokeBase<T> implements IInterceptStrategy<T> {\n\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\n        if (ctx.mock.callBase) {\n            invocation.invokeBase();\n            return InterceptionAction.Stop;\n        }\n        return InterceptionAction.Continue;\n    }\n}\n\nexport class HandleMockRecursion<T> implements IInterceptStrategy<T> {\n\n    handleIntercept(invocation: all.ICallContext, ctx: InterceptorContext<T>, localCtx: CurrentInterceptContext<T>): InterceptionAction {\n        //TODO: \n        return InterceptionAction.Continue;\n    }\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { InterceptorContext, IInterceptStrategy, InterceptionAction } from \"./InterceptorContext\";\nimport { CurrentInterceptContext } from \"./CurrentInterceptContext\";\nimport * as strategy from \"./InterceptorStrategies\";\n\nexport class InterceptorExecute<T> implements all.ICallInterceptor {\n    private _interceptorContext: InterceptorContext<T>;\n\n    constructor(mock: all.IMock<T>) {\n        this._interceptorContext = new InterceptorContext(mock);\n    }\n\n    get interceptorContext(): InterceptorContext<T> { return this._interceptorContext; }\n\n    intercept(invocation: all.ICallContext) {\n        let localCtx = new CurrentInterceptContext();\n\n        invocation.invocationType = all.InvocationType.EXECUTE;\n\n        _.some(this.interceptionStrategies(), (strategy: IInterceptStrategy<T>) => {\n            if (InterceptionAction.Stop === strategy.handleIntercept(invocation, this.interceptorContext, localCtx)) {\n                return true;\n            }\n        });\n    }\n\n    removeInvocation(invocation: all.ICallContext) {\n        this._interceptorContext.removeInvocation(invocation);\n    }\n\n    addExpectedCall(call: all.IProxyCall<T>): void {\n        this._interceptorContext.addExpectedCall(call);\n    }\n\n    verify(): void {\n        let expectedCalls = this._interceptorContext.expectedCalls();\n\n        let verifiableCalls: Array<all.IProxyCall<T>> = [];\n        if (this._interceptorContext.behavior == all.MockBehavior.Strict) { // verifiable by default when strict mocking\n            for (let call of expectedCalls) {\n                if (!call.isVerifiable)\n                    call.setVerifiable();\n                verifiableCalls.push(call);\n            }\n        }\n        else {\n            verifiableCalls = _.filter(expectedCalls, (c: all.IProxyCall<T>) => c.isVerifiable);\n        }\n        for (let v of verifiableCalls)\n            this.verifyCallCount(v, v.expectedCallCount);\n\n        let orderedCalls: Array<all.IProxyCall<T>> = _.filter(expectedCalls, (c: all.IProxyCall<T>) => c.isInSequence);\n        this.verifyCallsOrder(orderedCalls);\n    }\n\n    verifyCallCount<T>(call: all.IProxyCall<T>, times: all.Times): void {\n        let expectedCalls = this._interceptorContext.expectedCalls();\n        let actualCalls = this._interceptorContext.actualInvocations();\n\n        let callCount: number = _.filter(actualCalls, (c: all.ICallContext) => call.matches(c)).length;\n\n        if (!times.verify(callCount))\n            this.throwVerifyCallCountException(call.setupCall, times, expectedCalls, actualCalls);\n    }\n\n    private throwVerifyCallCountException(setupCall: all.ICallContext, times: all.Times,\n        expectedCalls: Array<all.IProxyCall<T>>, actualCalls: Array<all.ICallContext>) {\n\n        let failMsg = times.failMessage(setupCall);\n        let expectedCallsMsg = expectedCalls.reduce((a, x) => `${a} ${x}\\n`, \"\");\n        let actualCallsMsg = actualCalls.reduce((a, x) => `${a} ${x}\\n`, \"\");\n        let msg = `${failMsg}\\n Configured setups:\\n${expectedCallsMsg}\\n Performed invocations:\\n${actualCallsMsg}`;\n\n        let e = new all.MockException(all.MockExceptionReason.CallCountVerificationFailed, setupCall, msg);\n        throw e;\n    }\n\n    private verifyCallsOrder<T>(expectedCalls: Array<all.IProxyCall<T>>): void {\n        let actualCalls = this._interceptorContext.actualInvocations();\n\n        this.checkCallOrderExpectations(expectedCalls, actualCalls);\n    }\n\n    private checkCallOrderExpectations<T>(expectedCalls: Array<all.IProxyCall<T>>, actualCalls: Array<all.ICallContext>): void {\n        let checkOrder = (expectedCallCountList: Array<number>): boolean => {\n            let expectedCallCount = _.sum(expectedCallCountList);\n            let aci = 0;\n            for (let eci = 0; eci < expectedCallCountList.length; eci++) {\n                let expectedCall = expectedCalls[eci];\n                let expectedCallCount = expectedCallCountList[eci];\n                for (let count = 1; count <= expectedCallCount; count++) {\n                    let actualCall = actualCalls[aci++];\n                    if (!expectedCall.matches(actualCall))\n                        return false;\n                }\n            }\n            return aci === expectedCallCount;\n        }\n\n        let eureka = false;\n        let execute = (acc: Array<number>, i: number) => {\n            if (!eureka) {\n                if (i === expectedCalls.length)\n                    eureka = checkOrder(acc);\n                else\n                    for (let j = expectedCalls[i].expectedCallCount.min; j <= expectedCalls[i].expectedCallCount.max; j++) {\n                        acc[i] = j;\n                        execute(acc, i + 1);\n                    }\n            }\n        }\n        execute([], 0);\n\n        if (!eureka)\n            this.throwVerifyCallOrderException();\n    }\n\n    private throwVerifyCallOrderException() {\n        let e = new all.MockException(all.MockExceptionReason.CallOrderVerificationFailed, null);\n        throw e;\n    }\n\n    reset(): void {\n        this._interceptorContext.reset();\n    }\n\n    private interceptionStrategies(): _.List<IInterceptStrategy<T>> {\n        let strategies: _.List<IInterceptStrategy<T>> = [\n            new strategy.AddActualInvocation(),\n            new strategy.ExtractProxyCall(),\n            new strategy.ExecuteCall(),\n            new strategy.InvokeBase(),\n            new strategy.HandleMockRecursion()\n        ];\n        return strategies;\n    }\n\n}","import * as all from \"./_all\";\n\nexport class InterceptorSetup<T> implements all.ICallInterceptor {\n    private _interceptedCall: all.ICallContext;\n\n    get interceptedCall(): all.ICallContext { return this._interceptedCall; }\n\n    intercept(invocation: all.ICallContext) {\n        invocation.invocationType = all.InvocationType.SETUP;\n        \n        if (invocation.proxyType == all.ProxyType.DYNAMIC &&\n            invocation.callType == all.CallType.UNKNOWN)\n            invocation.callType = all.CallType.PROPERTY;\n\n        if (this._interceptedCall) {\n            throw new all.MockException(all.MockExceptionReason.MoreThanOneSetup,\n                invocation, `'${invocation}'; setup should contain only one expression`);\n        }\n\n        this._interceptedCall = invocation;\n    }\n\n    removeInvocation(invocation: all.ICallContext) {\n        if(this._interceptedCall && \n            this._interceptedCall === invocation)\n                this._interceptedCall = undefined;\n    }\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { MockBase } from \"./MockBase\";\nimport { InterceptorSetup } from \"./InterceptorSetup\";\nimport { Consts } from \"./Consts\";\n\nexport class MethodCall<T, TResult> implements all.IProxyCall<T>, all.IVerifies {\n\n    protected _id: string;\n    protected _setupCall: all.ICallContext;\n    protected _setupCallback: all.IAction;\n    protected _isVerifiable: boolean;\n    protected _expectedCallCount: all.Times;\n    protected _expectedCallType: all.ExpectedCallType;\n    protected _isInvoked: boolean;\n    protected _callCount: number = 0;\n    protected _thrownException: Error;\n    protected _evaluatedSuccessfully: boolean;\n\n    protected constructor(\n        public mock: MockBase<T>,\n        private _setupExpression: all.IFunc2<T, TResult>,\n        interceptor: InterceptorSetup<T>,\n        proxy: T) {\n\n        this._id = this.generateId();\n\n        _setupExpression(proxy);\n\n        if (interceptor.interceptedCall) {\n            let ic = interceptor.interceptedCall;\n\n            let newArgs = this.transformToMatchers(ic.args);\n            Object.defineProperty(newArgs, \"callee\",\n                { configurable: true, enumerable: true, writable: false, value: ic.args.callee });\n            ic.args = <IArguments><any>newArgs;\n\n            this._setupCall = ic;\n        }\n        else {\n            throw new all.MockException(all.MockExceptionReason.InvalidSetup,\n                this._setupExpression, `'${this._setupExpression}'`);\n        }\n    }\n\n    static ofStaticMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\n        let interceptor = new InterceptorSetup<U>();\n        let proxy = all.ProxyFactory.createProxy<U>(mock.target, interceptor);\n        let result = new MethodCall(mock, setupExpression, interceptor, proxy);\n        return result;\n    }\n\n    static ofDynamicMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\n        let interceptor = new InterceptorSetup<U>();\n        let proxy = all.ProxyFactory.createProxyES6<U>(mock.target, interceptor);\n        let result = new MethodCall(mock, setupExpression, interceptor, proxy);\n        return result;\n    }\n\n    private generateId() {\n        return \"MethodCall<\" + _.uniqueId() + \">\";\n    }\n\n    private transformToMatchers(args: IArguments): Array<all.IMatch> {\n        let newArgs: Array<all.IMatch> = [];\n\n        _.each(args, (a: any) => {\n            if (!_.isObject(a)) {\n                let newArg = new all.MatchValue(a);\n                newArgs.push(newArg);\n            }\n            else {\n                if (all.Match.isMatcher(a)) {\n                    newArgs.push(<all.IMatch>a);\n                }\n                else {\n                    // assume strict equality, short form of It.is(x => _.isEqual(x, a))\n                    let newArg = new all.MatchPred(x => _.isEqual(x, a));\n                    newArgs.push(newArg);\n                }\n            }\n        });\n\n        return newArgs;\n    }\n\n    // IProxyCall\n\n    get id(): string { return this._id; }\n    get setupExpression(): all.IAction1<T> { return this._setupExpression; }\n    get setupCall(): all.ICallContext { return this._setupCall; }\n    get isVerifiable(): boolean { return this._isVerifiable; }\n    get isInSequence(): boolean { return this._expectedCallType === all.ExpectedCallType.InSequence; }\n    get expectedCallCount(): all.Times { return this._expectedCallCount; }\n    get isInvoked(): boolean { return this._isInvoked; }\n    get callCount(): number { return this._callCount; }\n\n    setVerifiable(\n        times: all.Times = all.Times.once(),\n        expectedCallType: all.ExpectedCallType = all.ExpectedCallType.InAnyOrder): void {\n\n        this._isVerifiable = true;\n        this._expectedCallCount = times;\n        this._expectedCallType = expectedCallType;\n    }\n\n    evaluatedSuccessfully() {\n        this._evaluatedSuccessfully = true;\n    }\n\n    matches(call: all.ICallContext): boolean {\n        let match = false;\n\n        if (this._setupCall.property && call && call.property &&\n            this._setupCall.property.name === call.property.name) {\n\n            if (this._setupCall.args.length >= call.args.length) {\n                match = true;\n\n                if (!call.isAnUnknownDynamicCallAtExecution) {\n\n                    _.each(this._setupCall.args, (x: any, index: number) => {\n                        let setupArg = <all.IMatch>x;\n                        let callArg = call.args[index];\n\n                        if (match && !setupArg.___matches(callArg))\n                            match = false;\n                    });\n                }\n            }\n        }\n\n        return match;\n    }\n\n    execute(call: all.ICallContext): void {\n        this._isInvoked = true;\n\n        if (this._setupCallback != null) {\n            this._setupCallback.apply(this, call.args);\n        }\n\n        if (this._thrownException != null) {\n            throw this._thrownException;\n        }\n\n        this._callCount++;\n    }\n\n    // IVerifies\n\n    verifiable(\n        times?: all.Times,\n        expectedCallType?: all.ExpectedCallType): void {\n\n        this.setVerifiable(times, expectedCallType);\n    }\n\n    toString(): string {\n        let res = `${this.setupCall}`;\n        if (this.expectedCallCount)\n            res = `${res}, ${this.expectedCallCount}`;\n        return res;\n    }\n\n}\n","import * as all from \"./_all\";\nimport { MockBase } from \"./MockBase\";\nimport { InterceptorSetup } from \"./InterceptorSetup\";\nimport { MethodCall } from \"./MethodCall\";\n\nexport class MethodCallReturn<T, TResult> extends MethodCall<T, TResult> implements all.ISetup<T, TResult>, all.IReturnsResult<T> {\n\n    protected _returnValueFunc: all.IFuncN<any, TResult>;\n    hasReturnValue: boolean;\n    protected _callBase: boolean;\n    private readonly _overrideTarget: boolean;\n\n    private constructor(\n        mock: MockBase<T>,\n        setupExpression: all.IFunc2<T, TResult>,\n        interceptor: InterceptorSetup<T>,\n        proxy: T) {\n\n        super(mock, setupExpression, interceptor, proxy);\n\n        this._overrideTarget = mock.canOverrideTarget;\n    }\n\n    static ofStaticMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\n        let interceptor = new InterceptorSetup<U>();\n        let proxy = all.ProxyFactory.createProxy<U>(mock.target, interceptor);\n        let result = new MethodCallReturn(mock, setupExpression, interceptor, proxy);\n        return result;\n    }\n\n    static ofDynamicMock<U, UResult>(mock: MockBase<U>, setupExpression: all.IFunc2<U, UResult>) {\n        let interceptor = new InterceptorSetup<U>();\n        let proxy = all.ProxyFactory.createProxyES6<U>(mock.target, interceptor);\n        let result = new MethodCallReturn(mock, setupExpression, interceptor, proxy);\n        return result;\n    }\n\n    // overrides\n\n    execute(call: all.ICallContext): void {\n        super.execute(call);\n\n        if (this._callBase)\n            call.invokeBase();\n        else if (this.hasReturnValue) {\n            call.returnValue = this._returnValueFunc.apply(this, call.args);\n            // help ProxyES6 identify value getter invocation at execution time\n            call.property.desc = { value: this.setupCall.property.desc && this.setupCall.property.desc.value };\n        }\n    }\n\n    // ISetup\n\n    callback(action: all.IActionN<any>): all.IReturnsThrows<T, TResult> {\n        this._setupCallback = action;\n        return this;\n    }\n\n    throws(exception: Error): all.IThrowsResult {\n        this._thrownException = exception;\n        return this;\n    }\n\n    returns(valueFunc: all.IFuncN<any, TResult>): all.IReturnsResult<T> {\n        this._returnValueFunc = valueFunc;\n        this.hasReturnValue = true;\n\n        // override target\n        if (this._overrideTarget) {\n            let obj: Object = this.mock.target;\n            let name: string = this.setupCall.property.name;\n            let desc: all.PropDescriptor = this.setupCall.property.desc;\n\n            if (!desc &&\n                this.setupCall.proxyType == all.ProxyType.DYNAMIC) {\n                // enable target property enumeration for dynamic mocks\n                desc = {};\n                desc.configurable = true;\n                desc.enumerable = true;\n\n                if (this.setupCall.callType == all.CallType.FUNCTION)\n                    desc.value = this._returnValueFunc;\n                else\n                    desc.get = this._returnValueFunc;\n\n                Object.defineProperty(obj, name, desc);\n            }\n            else if (desc) {\n                desc.configurable = true;\n                desc.enumerable = true;\n                desc.value = this._returnValueFunc;\n                Object.defineProperty(obj, name, desc);\n            }\n        }\n\n        return this;\n    }\n\n    callBase(): all.IReturnsResult<T> {\n        this._callBase = true;\n        return this;\n    }\n\n    // IReturnsResult\n\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { MockBase } from \"./MockBase\";\nimport { MockBehavior } from \"./_all\";\nimport { InterceptorExecute } from \"./InterceptorExecute\";\nimport { MethodCall } from \"./MethodCall\";\nimport { MethodCallReturn } from \"./MethodCallReturn\";\n\nexport class StaticMock<T> extends MockBase<T> {\n\n    private constructor(\n        target: T,\n        canOverrideTarget: boolean,\n        behavior: all.MockBehavior) {\n\n        super(target, canOverrideTarget, behavior);\n\n        this._interceptor = new InterceptorExecute(this);\n        this._proxy = all.ProxyFactory.createProxy<T>(target, this._interceptor);\n    }\n\n    static ofInstance<U>(targetInstance: U, behavior: all.MockBehavior, shouldOverrideTarget: boolean): all.IMock<U> {\n        targetInstance = StaticMock.cloneDeep(targetInstance);\n        const mock: StaticMock<U> = new StaticMock(targetInstance, shouldOverrideTarget, behavior);\n        return mock;\n    }\n\n    static ofGlobalInstance<U>(targetInstance: U, behavior: all.MockBehavior): all.IMock<U> {\n        const mock: StaticMock<U> = new StaticMock(targetInstance, false, behavior);\n        return mock;\n    }\n\n    static ofType<U>(targetConstructor: all.CtorWithArgs<U>, behavior: all.MockBehavior, shouldOverrideTarget: boolean, targetConstructorArgs: any[]): all.IMock<U> {\n        const targetInstance: U = all.Utils.conthunktor(targetConstructor, targetConstructorArgs);\n        const mock: StaticMock<U> = new StaticMock(targetInstance, shouldOverrideTarget, behavior);\n        return mock;\n    }\n\n    private static cloneDeep<T>(target: T): T {\n        let copy = target;\n        if (!_.isFunction(target)) {\n            let func = (x: any): any => {\n                var value: any;\n                if (all.ProxyES5.isProxy(x))\n                    return x;\n            };\n            copy = _.cloneDeepWith(target, func);\n        }\n        return copy;\n    }\n\n    // setup\n\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\n        const call = MethodCallReturn.ofStaticMock(this, expression);\n        this._interceptor.addExpectedCall(call);\n        return call;\n    }\n\n    // verify\n\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\n        const call = MethodCall.ofStaticMock(this, expression);\n        call.verifiable(times);\n        this._interceptor.addExpectedCall(call);\n        try {\n            this._interceptor.verifyCallCount(call, times);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n}","import * as all from \"./_all\";\nimport { MockBase } from \"./MockBase\";\nimport { MockBehavior } from \"./_all\";\nimport { InterceptorExecute } from \"./InterceptorExecute\";\nimport { MethodCall } from \"./MethodCall\";\nimport { MethodCallReturn } from \"./MethodCallReturn\";\n\nexport class DynamicMock<T> extends MockBase<T> {\n\n    private constructor(\n        target: T,\n        name: string,\n        canOverrideTarget: boolean,\n        behavior: all.MockBehavior) {\n\n        super(target, canOverrideTarget, behavior);\n\n        if (name)\n            this._name = name;\n\n        this._interceptor = new InterceptorExecute(this);\n        this._proxy = all.ProxyFactory.createProxyES6<T>(target, this._interceptor);\n    }\n\n    static ofType<U>(name: string, behavior: all.MockBehavior, shouldOverrideTarget: boolean): all.IMock<U> {\n        const mock: DynamicMock<U> = new DynamicMock<U>(<any>(() => { }), name, shouldOverrideTarget, behavior);\n        return mock;\n    }\n\n    // setup\n\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\n        const call = MethodCallReturn.ofDynamicMock(this, expression);\n        this._interceptor.addExpectedCall(call);\n        return call;\n    }\n\n    // verify\n\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\n        const call = MethodCall.ofDynamicMock(this, expression);\n        this._interceptor.addExpectedCall(call);\n        try {\n            this._interceptor.verifyCallCount(call, times);\n        }\n        catch (e) {\n            throw e;\n        }\n    }\n\n}","import * as common from \"../Common/_all\";\nimport { MockBehavior } from \"./MockBehavior\";\nimport { IMock } from \"./IMock\";\nimport { StaticMock } from \"../StaticMock\";\nimport { DynamicMock } from \"../DynamicMock\";\n\nexport class MockApi {\n\n    static ofInstance<U>(targetInstance: U, behavior = MockBehavior.Loose, shouldOverrideTarget = true): IMock<U> {\n        const mock = StaticMock.ofInstance(targetInstance, behavior, shouldOverrideTarget);\n        return mock;\n    }\n\n    static ofType<U>(targetConstructor?: common.CtorWithArgs<U>, behavior = MockBehavior.Loose, shouldOverrideTarget = true, ...targetConstructorArgs: any[]): IMock<U> {\n        let mock: IMock<U>;\n        if (targetConstructor)\n            mock = MockApi.ofType2(targetConstructor, targetConstructorArgs, behavior, shouldOverrideTarget);\n        else\n            mock = DynamicMock.ofType<U>(undefined, behavior, shouldOverrideTarget);\n        return mock;\n    }\n\n    static ofType2<U>(targetConstructor: common.CtorWithArgs<U>, targetConstructorArgs: any[], behavior = MockBehavior.Loose, shouldOverrideTarget = true): IMock<U> {\n        const mock: IMock<U> = StaticMock.ofType(targetConstructor, behavior, shouldOverrideTarget, targetConstructorArgs);\n        return mock;\n    }\n\n}","import * as common from \"../Common/_all\";\nimport * as match from \"../Match/_all\";\n\nexport class It {\n\n    static isValue<T>(x: T): T {\n        let matcher: match.IMatch = new match.MatchValue(x);\n        return <any>matcher;\n    }\n\n    static isObjectWith<T>(x: { [P in keyof T]?: T[P] }): T {\n        let matcher: match.IMatch = new match.MatchObjectWith(x);\n        return <any>matcher;\n    }\n\n    static isAnyObject<T>(x: common.Ctor<T>): T {\n        let matcher: match.IMatch = new match.MatchAnyObject(x);\n        return <any>matcher;\n    }\n\n    static isAny(): any {\n        let matcher: match.IMatch = new match.MatchAny();\n        return <any>matcher;\n    }\n\n    static isAnyString(): string {\n        let matcher: match.IMatch = new match.MatchAnyString();\n        return <any>matcher;\n    }\n\n    static isAnyNumber(): number {\n        let matcher: match.IMatch = new match.MatchAnyNumber();\n        return <any>matcher;\n    }\n\n    static is<T>(predicate: common.IFunc2<T, boolean>): T {\n        let matcher: match.IMatch = new match.MatchPred(predicate);\n        return <any>matcher;\n    }\n}\n","import * as all from \"./_all\";\nimport { MockBehavior } from \"./_all\";\nimport { MethodCallReturn } from \"./MethodCallReturn\";\n\nexport enum GlobalType { Class, Function, Value }\n\nexport class GlobalMock<T> implements all.IGlobalMock<T> {\n\n    constructor(public mock: all.IMock<T>, private _name: string, private _type: GlobalType, public container: Object) {\n        if (!this._name)\n            this._name = mock.name;\n    }\n\n    get object() { return this.mock.object; }\n    get target() { return this.mock.target; }\n\n    get name() { return this._name || this.mock.name; }\n    get behavior() { return this.mock.behavior; }\n\n    get callBase() { return this.mock.callBase; }\n    set callBase(value: boolean) { this.mock.callBase = value; }\n\n    get type() { return this._type; }\n\n    // setup\n\n    setup<TResult>(expression: all.IFunc2<T, TResult>): MethodCallReturn<T, TResult> {\n        return this.mock.setup(expression);\n    }\n\n    // verify\n\n    verify<TResult>(expression: all.IFunc2<T, TResult>, times: all.Times): void {\n        this.mock.verify(expression, times);\n    }\n\n    verifyAll(): void {\n        this.mock.verifyAll();\n    }\n\n    reset(): void {\n        this.mock.reset();\n    }\n}","import * as _ from \"lodash\";\nimport * as common from \"../Common/_all\";\nimport { MockBehavior } from \"./MockBehavior\";\nimport { IMock } from \"./IMock\";\nimport { StaticMock } from \"../StaticMock\";\nimport { IGlobalMock } from \"./IGlobalMock\";\nimport { GlobalMock as GMock, GlobalType } from \"../GlobalMock\";\nimport { DynamicMock } from \"../DynamicMock\";\n\nexport class GlobalMockApi {\n\n    static ofInstance<U>(targetInstance: U, globalName?: string, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\n        const mock = StaticMock.ofGlobalInstance(targetInstance, behavior);\n        const type = _.isFunction(targetInstance) ? GlobalType.Function : GlobalType.Value;\n        return new GMock(mock, globalName, type, container);\n    }\n\n    static ofType<U>(targetConstructor: common.Ctor<U>, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\n        const targetInstance = new targetConstructor();\n        const mock: IMock<U> = StaticMock.ofInstance(targetInstance, behavior, false);\n        return new GMock(mock, undefined, GlobalType.Class, container);\n    }\n\n    static ofType2<U>(globalName: string, container: Object = window, behavior = MockBehavior.Loose): IGlobalMock<U> {\n        const mock: IMock<U> = DynamicMock.ofType<U>(globalName, behavior, false);\n        return new GMock(mock, undefined, GlobalType.Class, container);\n    }\n\n}","import * as _ from \"lodash\";\nimport * as all from \"./_all\";\nimport { GlobalType } from \"./GlobalMock\";\n\nexport class GlobalScope implements all.IUsingResult {\n\n    constructor(private _args: all.IGlobalMock<any>[]) {\n    }\n\n    with(action: all.IAction): void {\n        let initial: all.PropDescriptorMap = {};\n\n        try {\n            _.each(this._args, (a: all.IGlobalMock<any>) => {\n                let containerProps = all.PropertyRetriever.getOwnAndPrototypeEnumerablesAndNonenumerables(a.container);\n                let prop = _.find(containerProps, (p: { name: string; desc: all.PropDescriptor }) => p.name === a.name);\n\n                if (prop) {\n\n                    initial[a.name] = prop.desc;\n\n                    let desc: all.PropDescriptor = {};\n\n                    switch (a.type) {\n\n                        case GlobalType.Class:\n                            //TODO: return a new mock every time with same interceptor as the one used by mock passed in as arg to 'using' \n                            //      (to support different ctor arguments)\n                            desc.value = () => a.mock.object;\n                            break;\n\n                        case GlobalType.Function:\n                            desc.value = a.mock.object;\n                            break;\n\n                        case GlobalType.Value:\n                            desc.get = () => a.mock.object;\n                            break;\n\n                        default:\n                            throw new all.MockException(\n                                all.MockExceptionReason.UnknownGlobalType, a, `unknown global type: ${a.type}`);\n                    }\n\n                    try {\n                        Object.defineProperty(a.container, a.name, desc);\n                    } catch (e) {\n                        console.log(`1: ${e}`);\n                    }\n                }\n            });\n\n            action.apply(this, this._args);\n\n        } catch (e) {\n            console.log(`2: ${e}`);\n        } finally {\n            _.each(this._args, (a: all.IGlobalMock<any>) => {\n                    let desc: all.PropDescriptor = initial[a.name];\n\n                    if (desc) {\n\n                        switch (a.type) {\n\n                            case GlobalType.Class:\n                                break;\n\n                            case GlobalType.Function:\n                                break;\n\n                            case GlobalType.Value:\n                                desc.configurable = true;\n                                break;\n\n                            default:\n                        }\n\n                        try {\n                            Object.defineProperty(a.container, a.name, desc);\n                        } catch (e) {\n                            console.log(`3: ${e}`);\n                        }\n                    }\n                });\n        }\n    }\n}","import * as all from \"./_all\";\nimport { IUsingResult } from \"./IUsing\";\nimport { GlobalScope as GScope } from \"../GlobalScope\";\n\nexport class GlobalScopeApi {\n\n    static using(...args: all.IGlobalMock<any>[]): IUsingResult {\n        let scope = new GScope(args);\n        return scope;\n    }\n\n}"],"names":["MockBehavior","ExpectedCallType","__extends","_.template","error.MockException","error.MockExceptionReason","_.find","_.isNil","_.isUndefined","_.isFunction","CircularJSON.stringify","_.join","common.Utils","_.isString","_.isNumber","_.cloneDeep","_.isEqual","_.pick","_.keys","common.PropertyRetriever","_.each","_.isObject","_.isArray","_.isDate","_.isNull","inv.MethodInfo","inv.MethodInvocation","inv.PropertyInfo","inv.DynamicGetInvocation","inv.ValueSetterInvocation","all.MockBehavior","_.uniqueId","all.Utils","_.remove","_.filter","all.CallType","all.MockException","all.MockExceptionReason","all.InvocationType","_.some","_.sum","strategy.AddActualInvocation","strategy.ExtractProxyCall","strategy.ExecuteCall","strategy.InvokeBase","strategy.HandleMockRecursion","all.ProxyType","all.ProxyFactory","all.MatchValue","all.Match","all.MatchPred","all.ExpectedCallType","all.Times","all.ProxyES5","_.cloneDeepWith","match.MatchValue","match.MatchObjectWith","match.MatchAnyObject","match.MatchAny","match.MatchAnyString","match.MatchAnyNumber","match.MatchPred","GMock","all.PropertyRetriever","GScope"],"mappings":"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"}